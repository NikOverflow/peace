syntax = "proto3";

import "peace/base.proto";
import "peace/services/geoip.proto";
import "peace/services/chat.proto";

package peace.services.bancho_state;

service BanchoStateRPC {
  rpc BroadcastBanchoPackets(BroadcastBanchoPacketsRequest)
      returns (peace.base.ExecSuccess);

  rpc EnqueueBanchoPackets(EnqueueBanchoPacketsRequest)
      returns (peace.base.ExecSuccess);
  rpc BatchEnqueueBanchoPackets(BatchEnqueueBanchoPacketsRequest)
      returns (peace.base.ExecSuccess);

  rpc DequeueBanchoPackets(DequeueBanchoPacketsRequest) returns (BanchoPackets);

  rpc CreateUserSession(CreateUserSessionRequest)
      returns (CreateUserSessionResponse);
  rpc DeleteUserSession(RawUserQuery) returns (peace.base.ExecSuccess);

  // Check specified user session, if session not exists will return error(404)
  rpc CheckUserSessionExists(RawUserQuery) returns (UserSessionExistsResponse);
  // Get user info from sessions and returns `SessionId`, `UserId`, `Username`,
  // `UsernameUnicode` fields, if session not exists will return error(404)
  rpc GetUserSession(RawUserQuery) returns (GetUserSessionResponse);
  // Get user info from sessions and and returns the specified fields, if
  // session not exists will return error(404)
  rpc GetUserSessionWithFields(RawUserQueryWithFields)
      returns (GetUserSessionResponse);
  rpc ChannelUpdateNotify(ChannelUpdateNotifyRequest)
      returns (ChannelUpdateNotifyResponse);

  // For debug
  rpc GetAllSessions(GetAllSessionsRequest) returns (GetAllSessionsResponse);

  rpc SendUserStatsPacket(SendUserStatsPacketRequest)
      returns (peace.base.ExecSuccess);
  rpc BatchSendUserStatsPacket(BatchSendUserStatsPacketRequest)
      returns (peace.base.ExecSuccess);
  rpc SendAllPresences(SendAllPresencesRequest)
      returns (peace.base.ExecSuccess);
  rpc BatchSendPresences(BatchSendPresencesRequest)
      returns (peace.base.ExecSuccess);
  rpc UpdatePresenceFilter(UpdatePresenceFilterRequest)
      returns (peace.base.ExecSuccess);
  rpc UpdateUserBanchoStatus(UpdateUserBanchoStatusRequest)
      returns (peace.base.ExecSuccess);
}

message BroadcastBanchoPacketsRequest { bytes packets = 1; }

message RawUserQuery {
  enum QueryType {
    // Deserialize into `UserId(i32)`
    UserId = 0;
    // Deserialize into `Username(string)`
    Username = 1;
    // Deserialize into `UsernameUnicode(string)`
    UsernameUnicode = 2;
    // Deserialize into `SessionId(string)`
    SessionId = 3;
  }
  QueryType query_type = 1;
  optional int32 int_val = 2;
  optional string string_val = 3;
}

message RawUserQueryWithFields {
  RawUserQuery user_query = 1;
  int32 fields = 2;
}

message RawBanchoPacketTarget {
  enum TargetType {
    // Deserialize into `UserId(i32)`
    UserId = 0;
    // Deserialize into `Username(string)`
    Username = 1;
    // Deserialize into `UsernameUnicode(string)`
    UsernameUnicode = 2;
    // Deserialize into `SessionId(string)`
    SessionId = 3;
    // Deserialize into `Channel(string)`
    Channel = 4;
  }
  TargetType target_type = 1;
  optional int32 int_val = 2;
  optional string string_val = 3;
}

message EnqueueBanchoPacketsRequest {
  RawBanchoPacketTarget target = 1;
  bytes packets = 2;
}

message BatchEnqueueBanchoPacketsRequest {
  repeated EnqueueBanchoPacketsRequest requests = 1;
}

message DequeueBanchoPacketsRequest { RawBanchoPacketTarget target = 1; }

message BanchoPackets { bytes data = 1; }

message ConnectionInfo {
  string ip = 1;
  peace.services.geoip.GeoipData geoip_data = 2;
}

message CreateUserSessionRequest {
  int32 user_id = 1;
  string username = 2;
  optional string username_unicode = 3;
  int32 privileges = 4;
  string client_version = 5;
  int32 utc_offset = 6;
  bool display_city = 7;
  bool only_friend_pm_allowed = 8;
  ConnectionInfo connection_info = 9;
}

message CreateUserSessionResponse { string session_id = 1; }

message UserSessionExistsResponse { int32 user_id = 1; }

message GetUserSessionResponse {
  optional string session_id = 1;
  optional int32 user_id = 2;
  optional string username = 3;
  optional string username_unicode = 4;
}

message GetAllSessionsRequest {}

message UserData { string json = 1; }

message GetAllSessionsResponse {
  uint64 len = 1;
  repeated UserData indexed_by_session_id = 2;
  repeated UserData indexed_by_user_id = 3;
  repeated UserData indexed_by_username = 4;
  repeated UserData indexed_by_username_unicode = 5;
}

message SendUserStatsPacketRequest {
  RawUserQuery user_query = 1;
  RawBanchoPacketTarget to = 2;
}

message BatchSendUserStatsPacketRequest {
  repeated RawUserQuery user_queries = 1;
  RawBanchoPacketTarget to = 2;
}

message SendAllPresencesRequest { RawBanchoPacketTarget to = 1; }

message BatchSendPresencesRequest {
  repeated RawUserQuery user_queries = 1;
  RawBanchoPacketTarget to = 2;
}

message UpdatePresenceFilterRequest {
  RawUserQuery user_query = 1;
  int32 presence_filter = 2;
}

message UpdateUserBanchoStatusRequest {
  RawUserQuery user_query = 1;
  int32 online_status = 2;
  string description = 3;
  string beatmap_md5 = 4;
  uint32 mods = 5;
  int32 mode = 6;
  int32 beatmap_id = 7;
}

message UserQueries { repeated RawUserQuery value = 1; }

message ChannelUpdateNotifyRequest {
  optional UserQueries notify_targets = 1;
  peace.services.chat.ChannelInfo channel_info = 2;
}

message ChannelUpdateNotifyResponse { repeated RawUserQuery fails = 1; }
