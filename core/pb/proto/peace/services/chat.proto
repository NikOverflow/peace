syntax = "proto3";

import "peace/base.proto";
import "peace/services/bancho_state.proto";

package peace.services.chat;

service ChatRPC {
  rpc Login(LoginRequest) returns (peace.base.ExecSuccess);
  rpc Logout(LogoutRequest) returns (peace.base.ExecSuccess);

  rpc JoinChannel(JoinChannelRequest) returns (peace.base.ExecSuccess);
  rpc LeaveChannel(LeaveChannelRequest) returns (peace.base.ExecSuccess);

  rpc GetPublicChannels(GetPublicChannelsRequest) returns (GetPublicChannelsResponse);
  rpc LoadPublicChannels(LoadPublicChannelsRequest) returns (peace.base.ExecSuccess);

  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);
  rpc PullChatPackets(peace.services.bancho_state.RawUserQuery) returns (peace.services.bancho_state.BanchoPackets);
}

message RawChatMessageTarget {
  enum ChatTarget {
    // Deserialize into `ChannelId(u32)`
    ChannelId = 0;
    // Deserialize into `ChannelName(string)`
    ChannelName = 1;
    SessionId = 2;
    UserId = 3;
    Username = 4;
    UsernameUnicode = 5;
  }
  ChatTarget target_type = 1;
  optional uint64 int_val = 2;
  optional string string_val = 3;
}

message RawChannelQuery {
  enum QueryType {
    // Deserialize into `ChannelId(u32)`
    ChannelId = 0;
    // Deserialize into `ChannelName(string)`
    ChannelName = 1;
  }
  QueryType query_type = 1;
  optional uint64 int_val = 2;
  optional string string_val = 3;
}

message LoginRequest {
  int32 user_id = 1;
  string username = 2;
  optional string username_unicode = 3;
  int32 privileges = 4;
  int32 platforms = 5;
}

message LogoutRequest {
  peace.services.bancho_state.RawUserQuery user_query = 1;
  int32 platforms = 2;
}

message GetPublicChannelsRequest {}

message GetPublicChannelsResponse { repeated ChannelInfo channels = 1; }

enum ChannelType {
  Private = 0;
  Public = 1;
  Group = 2;
  Multiplayer = 3;
  Spectaor = 4;
}

message Users { repeated int32 users = 1; }


message ChannelInfo {
  uint64 id = 1;
  string name = 2;
  ChannelType channel_type = 3;
  optional string description = 4;
  uint32 online_users = 5;
  optional Users users = 6;
}

message JoinChannelRequest {
  RawChannelQuery channel_query = 1;
  peace.services.bancho_state.RawUserQuery user_query = 2;
}

message LeaveChannelRequest {
  RawChannelQuery channel_query = 1;
  peace.services.bancho_state.RawUserQuery user_query = 2;
}

message SendMessageRequest {
  peace.services.bancho_state.RawUserQuery sender = 1;
  string message = 2;
  RawChatMessageTarget target = 3;
}

message SendMessageResponse { uint64 message_id = 1; }

message LoadPublicChannelsRequest {}
