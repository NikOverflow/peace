//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.5

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub name: String,
    #[sea_orm(unique)]
    pub name_safe: String,
    #[sea_orm(unique)]
    pub name_unicode: Option<String>,
    #[sea_orm(unique)]
    pub name_unicode_safe: Option<String>,
    pub password: String,
    #[sea_orm(unique)]
    pub email: String,
    pub privileges: i32,
    pub country: Option<String>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::bancho_client_hardware_records::Entity")]
    BanchoClientHardwareRecords,
    #[sea_orm(has_many = "super::custom_settings::Entity")]
    CustomSettings,
    #[sea_orm(has_many = "super::favourite_beatmaps::Entity")]
    FavouriteBeatmaps,
    #[sea_orm(has_many = "super::leaderboard_fruits::Entity")]
    LeaderboardFruits,
    #[sea_orm(has_many = "super::leaderboard_fruits_relax::Entity")]
    LeaderboardFruitsRelax,
    #[sea_orm(has_many = "super::leaderboard_mania::Entity")]
    LeaderboardMania,
    #[sea_orm(has_many = "super::leaderboard_standard::Entity")]
    LeaderboardStandard,
    #[sea_orm(has_many = "super::leaderboard_standard_autopilot::Entity")]
    LeaderboardStandardAutopilot,
    #[sea_orm(has_many = "super::leaderboard_standard_relax::Entity")]
    LeaderboardStandardRelax,
    #[sea_orm(has_many = "super::leaderboard_taiko::Entity")]
    LeaderboardTaiko,
    #[sea_orm(has_many = "super::leaderboard_taiko_relax::Entity")]
    LeaderboardTaikoRelax,
    #[sea_orm(has_many = "super::scores_fruits::Entity")]
    ScoresFruits,
    #[sea_orm(has_many = "super::scores_fruits_relax::Entity")]
    ScoresFruitsRelax,
    #[sea_orm(has_many = "super::scores_mania::Entity")]
    ScoresMania,
    #[sea_orm(has_many = "super::scores_standard::Entity")]
    ScoresStandard,
    #[sea_orm(has_many = "super::scores_standard_autopilot::Entity")]
    ScoresStandardAutopilot,
    #[sea_orm(has_many = "super::scores_standard_relax::Entity")]
    ScoresStandardRelax,
    #[sea_orm(has_many = "super::scores_taiko::Entity")]
    ScoresTaiko,
    #[sea_orm(has_many = "super::scores_taiko_relax::Entity")]
    ScoresTaikoRelax,
    #[sea_orm(has_many = "super::user_pp_fruits::Entity")]
    UserPpFruits,
    #[sea_orm(has_many = "super::user_pp_fruits_relax::Entity")]
    UserPpFruitsRelax,
    #[sea_orm(has_many = "super::user_pp_mania::Entity")]
    UserPpMania,
    #[sea_orm(has_many = "super::user_pp_standard::Entity")]
    UserPpStandard,
    #[sea_orm(has_many = "super::user_pp_standard_autopilot::Entity")]
    UserPpStandardAutopilot,
    #[sea_orm(has_many = "super::user_pp_standard_relax::Entity")]
    UserPpStandardRelax,
    #[sea_orm(has_many = "super::user_pp_taiko::Entity")]
    UserPpTaiko,
    #[sea_orm(has_many = "super::user_pp_taiko_relax::Entity")]
    UserPpTaikoRelax,
    #[sea_orm(has_many = "super::user_stats_fruits::Entity")]
    UserStatsFruits,
    #[sea_orm(has_many = "super::user_stats_fruits_relax::Entity")]
    UserStatsFruitsRelax,
    #[sea_orm(has_many = "super::user_stats_mania::Entity")]
    UserStatsMania,
    #[sea_orm(has_many = "super::user_stats_standard::Entity")]
    UserStatsStandard,
    #[sea_orm(has_many = "super::user_stats_standard_autopilot::Entity")]
    UserStatsStandardAutopilot,
    #[sea_orm(has_many = "super::user_stats_standard_relax::Entity")]
    UserStatsStandardRelax,
    #[sea_orm(has_many = "super::user_stats_standard_score_v2::Entity")]
    UserStatsStandardScoreV2,
    #[sea_orm(has_many = "super::user_stats_taiko::Entity")]
    UserStatsTaiko,
    #[sea_orm(has_many = "super::user_stats_taiko_relax::Entity")]
    UserStatsTaikoRelax,
}

impl Related<super::bancho_client_hardware_records::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BanchoClientHardwareRecords.def()
    }
}

impl Related<super::custom_settings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CustomSettings.def()
    }
}

impl Related<super::favourite_beatmaps::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FavouriteBeatmaps.def()
    }
}

impl Related<super::leaderboard_fruits::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LeaderboardFruits.def()
    }
}

impl Related<super::leaderboard_fruits_relax::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LeaderboardFruitsRelax.def()
    }
}

impl Related<super::leaderboard_mania::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LeaderboardMania.def()
    }
}

impl Related<super::leaderboard_standard::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LeaderboardStandard.def()
    }
}

impl Related<super::leaderboard_standard_autopilot::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LeaderboardStandardAutopilot.def()
    }
}

impl Related<super::leaderboard_standard_relax::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LeaderboardStandardRelax.def()
    }
}

impl Related<super::leaderboard_taiko::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LeaderboardTaiko.def()
    }
}

impl Related<super::leaderboard_taiko_relax::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LeaderboardTaikoRelax.def()
    }
}

impl Related<super::scores_fruits::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ScoresFruits.def()
    }
}

impl Related<super::scores_fruits_relax::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ScoresFruitsRelax.def()
    }
}

impl Related<super::scores_mania::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ScoresMania.def()
    }
}

impl Related<super::scores_standard::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ScoresStandard.def()
    }
}

impl Related<super::scores_standard_autopilot::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ScoresStandardAutopilot.def()
    }
}

impl Related<super::scores_standard_relax::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ScoresStandardRelax.def()
    }
}

impl Related<super::scores_taiko::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ScoresTaiko.def()
    }
}

impl Related<super::scores_taiko_relax::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ScoresTaikoRelax.def()
    }
}

impl Related<super::user_pp_fruits::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserPpFruits.def()
    }
}

impl Related<super::user_pp_fruits_relax::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserPpFruitsRelax.def()
    }
}

impl Related<super::user_pp_mania::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserPpMania.def()
    }
}

impl Related<super::user_pp_standard::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserPpStandard.def()
    }
}

impl Related<super::user_pp_standard_autopilot::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserPpStandardAutopilot.def()
    }
}

impl Related<super::user_pp_standard_relax::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserPpStandardRelax.def()
    }
}

impl Related<super::user_pp_taiko::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserPpTaiko.def()
    }
}

impl Related<super::user_pp_taiko_relax::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserPpTaikoRelax.def()
    }
}

impl Related<super::user_stats_fruits::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserStatsFruits.def()
    }
}

impl Related<super::user_stats_fruits_relax::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserStatsFruitsRelax.def()
    }
}

impl Related<super::user_stats_mania::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserStatsMania.def()
    }
}

impl Related<super::user_stats_standard::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserStatsStandard.def()
    }
}

impl Related<super::user_stats_standard_autopilot::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserStatsStandardAutopilot.def()
    }
}

impl Related<super::user_stats_standard_relax::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserStatsStandardRelax.def()
    }
}

impl Related<super::user_stats_standard_score_v2::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserStatsStandardScoreV2.def()
    }
}

impl Related<super::user_stats_taiko::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserStatsTaiko.def()
    }
}

impl Related<super::user_stats_taiko_relax::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserStatsTaikoRelax.def()
    }
}

impl Related<super::beatmaps::Entity> for Entity {
    fn to() -> RelationDef {
        super::beatmap_ratings::Relation::Beatmaps.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::beatmap_ratings::Relation::Users.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
