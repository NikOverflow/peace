//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.5

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub name: String,
    #[sea_orm(unique)]
    pub name_safe: String,
    #[sea_orm(unique)]
    pub name_unicode: Option<String>,
    #[sea_orm(unique)]
    pub name_unicode_safe: Option<String>,
    pub password: String,
    #[sea_orm(unique)]
    pub email: String,
    pub privileges: i32,
    pub country: Option<String>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::bancho_client_hardware_records::Entity")]
    BanchoClientHardwareRecords,
    #[sea_orm(has_many = "super::custom_settings::Entity")]
    CustomSettings,
    #[sea_orm(has_many = "super::favourite_beatmaps::Entity")]
    FavouriteBeatmaps,
    #[sea_orm(has_many = "super::leaders_fruits::Entity")]
    LeadersFruits,
    #[sea_orm(has_many = "super::leaders_fruits_relax::Entity")]
    LeadersFruitsRelax,
    #[sea_orm(has_many = "super::leaders_mania::Entity")]
    LeadersMania,
    #[sea_orm(has_many = "super::leaders_standard::Entity")]
    LeadersStandard,
    #[sea_orm(has_many = "super::leaders_standard_autopilot::Entity")]
    LeadersStandardAutopilot,
    #[sea_orm(has_many = "super::leaders_standard_relax::Entity")]
    LeadersStandardRelax,
    #[sea_orm(has_many = "super::leaders_taiko::Entity")]
    LeadersTaiko,
    #[sea_orm(has_many = "super::leaders_taiko_relax::Entity")]
    LeadersTaikoRelax,
    #[sea_orm(has_many = "super::scores_fruits::Entity")]
    ScoresFruits,
    #[sea_orm(has_many = "super::scores_fruits_relax::Entity")]
    ScoresFruitsRelax,
    #[sea_orm(has_many = "super::scores_mania::Entity")]
    ScoresMania,
    #[sea_orm(has_many = "super::scores_standard::Entity")]
    ScoresStandard,
    #[sea_orm(has_many = "super::scores_standard_autopilot::Entity")]
    ScoresStandardAutopilot,
    #[sea_orm(has_many = "super::scores_standard_relax::Entity")]
    ScoresStandardRelax,
    #[sea_orm(has_many = "super::scores_taiko::Entity")]
    ScoresTaiko,
    #[sea_orm(has_many = "super::scores_taiko_relax::Entity")]
    ScoresTaikoRelax,
    #[sea_orm(has_many = "super::user_stats_fruits::Entity")]
    UserStatsFruits,
    #[sea_orm(has_many = "super::user_stats_fruits_relax::Entity")]
    UserStatsFruitsRelax,
    #[sea_orm(has_many = "super::user_stats_mania::Entity")]
    UserStatsMania,
    #[sea_orm(has_many = "super::user_stats_standard::Entity")]
    UserStatsStandard,
    #[sea_orm(has_many = "super::user_stats_standard_autopilot::Entity")]
    UserStatsStandardAutopilot,
    #[sea_orm(has_many = "super::user_stats_standard_relax::Entity")]
    UserStatsStandardRelax,
    #[sea_orm(has_many = "super::user_stats_taiko::Entity")]
    UserStatsTaiko,
    #[sea_orm(has_many = "super::user_stats_taiko_relax::Entity")]
    UserStatsTaikoRelax,
}

impl Related<super::bancho_client_hardware_records::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BanchoClientHardwareRecords.def()
    }
}

impl Related<super::custom_settings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CustomSettings.def()
    }
}

impl Related<super::favourite_beatmaps::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FavouriteBeatmaps.def()
    }
}

impl Related<super::leaders_fruits::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LeadersFruits.def()
    }
}

impl Related<super::leaders_fruits_relax::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LeadersFruitsRelax.def()
    }
}

impl Related<super::leaders_mania::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LeadersMania.def()
    }
}

impl Related<super::leaders_standard::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LeadersStandard.def()
    }
}

impl Related<super::leaders_standard_autopilot::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LeadersStandardAutopilot.def()
    }
}

impl Related<super::leaders_standard_relax::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LeadersStandardRelax.def()
    }
}

impl Related<super::leaders_taiko::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LeadersTaiko.def()
    }
}

impl Related<super::leaders_taiko_relax::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LeadersTaikoRelax.def()
    }
}

impl Related<super::scores_fruits::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ScoresFruits.def()
    }
}

impl Related<super::scores_fruits_relax::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ScoresFruitsRelax.def()
    }
}

impl Related<super::scores_mania::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ScoresMania.def()
    }
}

impl Related<super::scores_standard::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ScoresStandard.def()
    }
}

impl Related<super::scores_standard_autopilot::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ScoresStandardAutopilot.def()
    }
}

impl Related<super::scores_standard_relax::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ScoresStandardRelax.def()
    }
}

impl Related<super::scores_taiko::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ScoresTaiko.def()
    }
}

impl Related<super::scores_taiko_relax::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ScoresTaikoRelax.def()
    }
}

impl Related<super::user_stats_fruits::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserStatsFruits.def()
    }
}

impl Related<super::user_stats_fruits_relax::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserStatsFruitsRelax.def()
    }
}

impl Related<super::user_stats_mania::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserStatsMania.def()
    }
}

impl Related<super::user_stats_standard::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserStatsStandard.def()
    }
}

impl Related<super::user_stats_standard_autopilot::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserStatsStandardAutopilot.def()
    }
}

impl Related<super::user_stats_standard_relax::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserStatsStandardRelax.def()
    }
}

impl Related<super::user_stats_taiko::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserStatsTaiko.def()
    }
}

impl Related<super::user_stats_taiko_relax::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserStatsTaikoRelax.def()
    }
}

impl Related<super::beatmaps::Entity> for Entity {
    fn to() -> RelationDef {
        super::beatmap_ratings::Relation::Beatmaps.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::beatmap_ratings::Relation::Users.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
