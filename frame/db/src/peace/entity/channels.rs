//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use super::sea_orm_active_enums::ChannelType;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "channels")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i64,
    pub channel_type: ChannelType,
    #[sea_orm(unique)]
    pub name: Option<String>,
    pub description: Option<String>,
    pub icon: Option<String>,
    pub auto_join: bool,
    pub creator_id: Option<i64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::chat_messages::Entity")]
    ChatMessages,
}

impl Related<super::chat_messages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChatMessages.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        super::channel_users::Relation::Users.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::channel_users::Relation::Channels.def().rev())
    }
}

impl Related<super::privileges::Entity> for Entity {
    fn to() -> RelationDef {
        super::channel_privileges::Relation::Privileges.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::channel_privileges::Relation::Channels.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
